static gchar *finding = NULL;
static GtkNotebook *notebook;
static GtkWidget *find_window_find;
static GtkWidget *find_window_replace;
static GtkWidget *find_window;
static GtkWidget *window;

typedef struct tabcontents{
  int page;
  GtkWidget *text_view;
  GtkTextBuffer *text_buffer;
  GtkTextBuffer *undo_buffer;
  GtkTextBuffer *redo_buffer;
  GtkTextBuffer *map_buffer;
} tabcontents;

static void activate(GtkApplication* app, gpointer user_data);
static void block_insertdelete_signals(GtkTextBuffer *text_buffer);
static gboolean check_equals_unsaved();
static void close_tab();
static void find_clear_tags();
static void find_close();
static const gchar* get_current_tab_label_text();
static gchar* get_find_find();
static int get_int_length(gint integer);
static gboolean get_notebook_no_pages();
static GList* get_tabbox_children(GtkNotebook *tabnotebook, gint page);
static struct tabcontents get_tab_contents(gint page);
int main(int argc, char **argv);
static void menu_deleteline();
static void menu_find();
static void menu_findbottom();
static void menu_findnext();
static void menu_findprevious();
static void menu_find_recursive(GtkTextBuffer *buffer, GtkTextIter start);
static void menu_findreplaceall();
static void menu_findtop();
static void menu_open();
static void menu_redo();
static void menu_refind();
static void menu_save();
static void menu_saveas();
static void menu_undo();
static GtkWidget* new_scrolled_window();
static void new_tab();
static GtkWidget* new_textview(gboolean map);
static void open_file(char *filename);
static void place_cursor(GtkWidget *text_view, GtkTextBuffer *text_buffer, GtkTextIter *iter);
static void save_tab(const char *filename);
static void text_deleted(GtkTextBuffer *buffer, GtkTextIter *start, GtkTextIter *end);
static void text_inserted(GtkTextBuffer *buffer, GtkTextIter *iter, gchar *value);
static void unblock_insertdelete_signals(GtkTextBuffer *text_buffer);
static gchar* undoredo_entry(gchar *value, gboolean inserted, gint line, gint lineoffset);
static void update_map();
static void update_opened_files();
